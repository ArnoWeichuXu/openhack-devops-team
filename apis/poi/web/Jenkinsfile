pipeline {
    agent {
        label {
            label 'node3'
            retries 3
        }
    }

    environment {
    WorkDir = "apis/poi"
    TestUnitDir = "apis/poi/tests/UnitTests"
    ImgName = "arnoxuweichu/poi"
    ImgTag = "${params.ImgTag}"
    }

    parameters {
    booleanParam defaultValue: true, description: '''True: upload image; False: do not upload image''', name: 'blUploadImage'
    string defaultValue: '1.0', description: 'Set default image tag to 1.0', name: 'ImgTag', trim: true
    }

    stages { 
        stage('.Net Test') {
            agent {
                docker { 
                    image 'mcr.microsoft.com/dotnet/sdk:3.1' 
                }
            }
            environment {
                DOTNET_CLI_HOME = "/tmp/DOTNET_CLI_HOME"
            }
            steps {
                echo "Running .Net UnitTests... IntegrationTests will be skipped due to NO databased available"
                dir(WorkDir) {
                    sh 'dotnet build .'
                }
                dir(TestUnitDir){
                    sh 'dotnet test .'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker Image $ImgName:$ImgTag ..."
                dir(WorkDir) {
                    sh 'sudo docker build -t $ImgName:$ImgTag ./web'
                }
            }
        }

        stage('Canary') {
            steps {
                timeout(1) {
                    input 'Do you want to upload image?'
                }
            }
        } 

        stage('Upload Docker Image') {
            when {
  		        expression {return params.blUploadImage}
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'DockerHub', passwordVariable: 'DockerHubPwd', usernameVariable: 'DockerHubUsr')]) {
                    echo "Logging in Dockerhub ..."
                    sh 'sudo docker login -u $DockerHubUsr -p $DockerHubPwd'
                    echo "Uploading Docker Image $ImgName:$ImgTag ..."
                    sh 'sudo docker push $ImgName:$ImgTag'
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up workspace and docker images..."
            cleanWs()
            sh 'sudo docker rmi $ImgName:$ImgTag'
            sh 'sudo docker ps -a && sudo docker images -a'
        }
    }
}