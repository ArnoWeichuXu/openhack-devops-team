pipeline {
    agent {
        label {
            label 'node3'
            retries 3
        }
    }

    environment {
    WorkDir = "apis/trips"
    TestDir = "apis/trips/tripsgo"
    ImgName = "arnoxuweichu/trips"
    ImgTag = "${params.ImgTag}"
    }

    parameters {
    booleanParam defaultValue: true, description: '''True: upload image; False: do not upload image''', name: 'blUploadImage'
    string defaultValue: '1.0', description: 'Set default image tag to 1.0', name: 'ImgTag', trim: true
    }

    stages { 
        stage('go Test') {
            agent {
                docker { 
                    image 'golang:1.19' 
                }
            }
            //environment {GOCACHE = ""}           
            steps {
                sh 'go version'
                sh 'go env'
                /*dir(WorkDir) {
                sh '/usr/local/go/bin/go get -d'
                sh '/usr/local/go/bin/go build -o main .'
                }
                echo "Running go test ..."
                dir(TestDir) {
                    sh 'go test . -run Unit'
                }*/

            }
        }

        /*stage('Build Docker Image') {
            steps {
                echo "Building Docker Image $ImgName:$ImgTag ..."
                dir(WorkDir) {
                    sh 'sudo docker build -t $ImgName:$ImgTag .'
                }
            }
        }

        stage('Canary') {
            steps {
                timeout(1) {
                    input message: 'Do you want to upload image?', ok: 'Upload Image'
                }
            }
        } 

        stage('Upload Docker Image') {
            when {
  		        expression {return params.blUploadImage}
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'DockerHub', passwordVariable: 'DockerHubPwd', usernameVariable: 'DockerHubUsr')]) {
                    echo "Logging in Dockerhub ..."
                    sh 'sudo docker login -u $DockerHubUsr -p $DockerHubPwd'
                    echo "Uploading Docker Image $ImgName:$ImgTag ..."
                    sh 'sudo docker push $ImgName:$ImgTag'
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up workspace and docker images..."
            cleanWs()
            sh 'sudo docker rmi $ImgName:$ImgTag'
        }*/
    }
}